
c = BuildmasterConfig = {}

# This wraps a dictionary so we can have config.THING available in the config
class Properties(object):
    def __init__(self, d):
        self.d = d
    def __getattr__(self, m):
        return self.d.get(m, None)

# This is a dictionary of buildout controlled environment-specific config information
# that we pass to the real master configuration
config = Properties({
${config}
})

#if $getVar('dburl', None)
## The database to store change and builder state information in
c['db_url'] = "${dburl}"
#end if

# Default to something sensible
c['status'] = []
c['builders'] = []
c['schedulers'] = []
c['slaves'] = []

# State dictionary - this allows config snippets to inherit things from other
#   config snippets
state = {
    "c": c,
    "BuildmasterConfig": c,
    "config": config,
    "basedir": basedir,
    }

def share(name, val):
    state[name] = val
state['share'] = share

#if $getVar('cfgfile', None)
#for $file in $cfgfile
#
# Load config from $file
#
new_state = state.copy()
new_state['__file__'] = '$file'
execfile('$file', new_state)
#end for
#end if

#if $getVar('cfgdir', None)
from glob import glob

#for $dir in $cfgdir
#
# Load any .cfg files we can find in $dir
#
files = glob('$dir/*.cfg')
files.sort()
for file in files:
    new_state = state.copy()
    new_state['__file__'] = file
    execfile(file, new_state)
#end for
#end if

