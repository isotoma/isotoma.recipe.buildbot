
c = BuildmasterConfig = {}

# This wraps a dictionary so we can have config.THING available in the config
class Properties(object):
    def __init__(self, d):
        self.d = d
    def __getattr__(self, m):
        return self.d.get(m, None)

# This is a dictionary of buildout controlled environment-specific config information
# that we pass to the real master configuration
config = Properties({
${config}
})


## The database to store change and builder state information in
c['db_url'] = "${dburl}"


# Default to something sensible
c['status'] = []
c['builders'] = []
c['schedulers'] = []
c['slaves'] = []


#if $getVar('cfgfile', None)
#for $file in $cfgfile
#
# Load config from $file
#
execfile('$file', {
    "c": c,
    "BuildmasterConfig": c,
    "config": config,
    "basedir": basedir,
    })


#end for
#end if

#if $getVar('cfgdir', None)
from glob import glob

#for $dir in $cfgdir
#
# Load any .cfg files we can find in $dir
#
files = glob('$dir/*.cfg')
files.sort()
for file in files:
    execfile(file, {
        "c": c,
        "BuildmasterConfig": c,
        "config": config,
        "basedir": basedir,
        })


#end for
#end if

